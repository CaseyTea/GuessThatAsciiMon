@page "/"
@rendermode InteractiveServer
@using GuessThatAsciiMon.Models
@using GuessThatAsciiMon.Services
@inject IPokemonService PokemonService
@inject IAsciiService AsciiService
@inject IGameService GameService

<PageTitle>GuessThatAsciiMon</PageTitle>

<div class="terminal-window">
    <div class="terminal-header">GuessThatAsciiMon - Pokemon ASCII Guessing Game</div>
    <div class="terminal-body">

        @if (isLoading)
        {
            <div class="terminal-prompt">Loading new Pokemon...</div>
            <div class="terminal-prompt">Please wait<span class="cursor">_</span></div>
        }
        else if (currentPokemon != null)
        {
            <div style="text-align: center; margin-bottom: 20px;">
                <pre class="ascii-art">@asciiArt</pre>
            </div>

            <div class="pokemon-info">
                <div>Weight: @currentPokemon.Weight</div>
                <div>Type(s):</div>
                @if (currentPokemon.Types != null)
                {
                    @foreach (var typeInfo in currentPokemon.Types)
                    {
                        <span class="pokemon-type">@typeInfo.Type?.Name</span>
                    }
                }
            </div>

            <div class="terminal-prompt">What's that Pokemon?</div>
            <input class="terminal-input" @bind="userGuess" @onkeypress="HandleKeyPress"
                   placeholder="Enter your guess..." disabled="@isLoading" />

            <div style="margin: 20px 0; text-align: center;">
                <button class="terminal-button" @onclick="SubmitGuess" disabled="@(isLoading || string.IsNullOrWhiteSpace(userGuess))">
                    Submit Guess
                </button>
                <button class="terminal-button" @onclick="LoadNewPokemon" disabled="@isLoading">
                    New Pokemon
                </button>
                @if (gameResult != null)
                {
                    <button class="terminal-button" @onclick="RevealAnswer">
                        Reveal Answer
                    </button>
                }
            </div>

            @if (gameResult != null)
            {
                <div class="@(gameResult.IsCorrect ? "correct-answer" : "wrong-answer")" style="margin: 15px 0; text-align: center;">
                    @gameResult.Message
                </div>
            }
        }
        else if (hasError)
        {
            <div class="wrong-answer">
                <div>Error loading Pokemon. Please try again.</div>
                <button class="terminal-button" @onclick="LoadNewPokemon" style="margin-top: 10px;">
                    Try Again
                </button>
            </div>
        }
        else
        {
            <div class="terminal-prompt">Welcome to GuessThatAsciiMon!</div>
            <div class="terminal-prompt">Click 'New Pokemon' to start playing.</div>
            <button class="terminal-button" @onclick="LoadNewPokemon" style="margin-top: 20px;">
                Start Game
            </button>
        }

        <div class="terminal-prompt" style="margin-top: auto; padding-top: 20px;">
            Ready<span class="cursor">_</span>
        </div>
    </div>
</div>

@code {
    private Pokemon? currentPokemon;
    private string asciiArt = "";
    private string userGuess = "";
    private GameResult? gameResult;
    private bool isLoading = false;
    private bool hasError = false;

    private async Task LoadNewPokemon()
    {
        isLoading = true;
        hasError = false;
        gameResult = null;
        userGuess = "";
        StateHasChanged();

        try
        {
            // Get random Pokemon
            currentPokemon = await PokemonService.GetRandomPokemonAsync();

            // Download and convert sprite to ASCII
            if (currentPokemon?.Sprites?.FrontDefaultUrl != null)
            {
                var imageData = await PokemonService.DownloadImageAsync(currentPokemon.Sprites.FrontDefaultUrl);
                asciiArt = await AsciiService.ConvertImageToAsciiAsync(imageData);
            }
            else
            {
                asciiArt = "No image available";
            }
        }
        catch (Exception ex)
        {
            hasError = true;
            asciiArt = "";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SubmitGuess()
    {
        if (string.IsNullOrWhiteSpace(userGuess) || currentPokemon == null)
            return;

        gameResult = GameService.ProcessGuess(userGuess.Trim(), currentPokemon);
        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading && !string.IsNullOrWhiteSpace(userGuess))
        {
            await SubmitGuess();
        }
    }

    private void RevealAnswer()
    {
        if (currentPokemon != null && gameResult != null && !gameResult.IsCorrect)
        {
            userGuess = currentPokemon.Name ?? "";
            StateHasChanged();
        }
    }
}